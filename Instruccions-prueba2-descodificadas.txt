10	00001	000010	00000	10000000100010 //rs1 or simm13 ->rd
10	00100	000010	00000	10000011011100 //rs1 or simm13 ->rd
10	01010	000010	00000	000000 00000100 //rs1 or rs2 ->rd
11	00011	000000	00000	000000 00001010 //load and add -> illegal trap instruction
10	01010	000000	01010	10000000000100 //add rs1, simm13 ->rd
10	00010	000000	00011	000000 00000001 //add rs1 , rs2 ->rd
10	00101	000010	00000	000000 00000010 //rs1 or rs2 -> rd
11	00101	000100	00000	000000 00001010 //M[rs1+rs2] <- rd
10	01010	000000	01010	10000000000100 // add rs1, simm13 ->rd
10	00101	000100	00001	000000 00000010 // sub rs1, rs2
11	00101	000100	00000	000000 00001010 // M[rs1+rs2] <- rd
10	010010	00000	01010	100000 00000100 // add rs1, rs2 ->rd
00	00101	100	0011110000111100000110  //Sethi
11	00101	000100	00000	000000 00001010 // M[rs1+rs2] <- rd
10	01010	000000	01010	10000000000100 // add rs1, simm13 ->rd
10	00101	100111	00011	10000000000011 //sub rs1, simm13 ->rd
11	00101	000100	00000	000000 00001010 //M[rs1+rs2] <- rd
10	01010	000000	01010	10000000000100 // add rs1, simm13 ->rd
10	00101	100101	00011	10000000000011 //shift logical left rs1, simm13 -> rd
11	00101	000100	00000	000000 00001010 //M[rs1+rs2] <- rd
10	01010	000000	01010	10000000000100 // add rs1, simm13 ->rd
10	00101	100110	00011	10000000000011 //shift logical left rs1, simm13 -> rd
11	00101	000100	00000	000000 00001010 //M[rs1+rs2] <- rd
10	01010	000000	01010	10000000000100 // add rs1, simm13 -> rd
01	000000000000000000000000000100		// call
10	01000	000010	00000	10000000100100 //rs1 or simm13 ->rd
10	00000	000000	00000	000000 00000000// add rs1, rs2 -> rd
10	00000	000000	00000	000000 00000000// add rs1, rs2 -> rd
10	01111	000000	01000	000000 00001111// add rs1, rs2 -> rd
11	01111	000100	00000	000000 00001010 //M[rs1+rs2] <- rd
10	00000	111000	00000	000000 00001111 //jmpl rs1, rs2
10	01010	000000	01010	10000000000100 // add rs1, simm13 -> rd
10	00000	000000	00000	000000 00000000// add rs1, rs2 -> rd
11	01100	000000	00100	11111111111100 //load and add -> illegal trap instruction 
11	01011	000000	00100	111111 11111000 //load and add -> illegal trap instruction
10	00000	010000	01100	000000 00001011 //addcc rs1, rs2 -> rd
00	0	0111	010	0000000000000000000011  //Branch overflow 1, a =0
10	00000	000000	00000	000000 00000000 //add rs1, rs2 -> rd
10	00101	000001	00001	000000 00000000 //rs1 and rs2 -> rd
11	00101	000100	00000	000000 00001010 //M[rs1+rs2] <- rd
10	01010	000000	01010	10000000000100 // add rs1, simm13 -> rd
10	00101	000000	00001	000000 00001011 //add rs1, rs2 -> rd
00	0	0111	010	0000000000000000000011 //Branch overflow 1, a =0
10	00000	000000	00000	000000 00000000 //add rs1, rs2 ->rd
10	00101	000001	00001	000000 00000000 //rs1 and rs2 ->rd
11	00101	000100	00000	000000 00001010 //M[rs1+rs2] <- rd
10	01010	000000	01010	10000000000100 //add rs1, simm13 ->rd
10	00101	010010	00000	10000000000100//rs1 orcc simm13
00	1	0001	010	0000000000000000000010//Branch on equal, a =1
10	00101	000010	00000	10000000001111// rs1 or simm13
11	00101	000100	00000	000000 00001010 //M[rs1+rs2] <- rd
00	0	1000	010	0000000000000000000000 //Branch always a = 0
10	00000	000000	00000	000000 00000000 //add rs1, rs2 ->rd
10	10000	000000	00000	000000 00000000 //add rs1, rs2 ->rd
11	00000	000000	00000	000000 00000000 //load and add -> illegal trap instruction
11	11111	111111	11111	111111 11110101 ////load, op3 does not exist-> illegal trap instruction
